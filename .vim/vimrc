"Confused? Remember that you can use :help <something>

call pathogen#infect() " Remember to call :Helptags to generate the vimhelpfiles
syntax on
filetype plugin indent on

set t_Co=256
colorscheme jellybeans

" Ruby <3 : tab = 2 spaces
set expandtab
set tabstop=2 shiftwidth=2 softtabstop=2
set autoindent

"I like line numbers, relative to the cursor.
:set rnu
" Insert mode: absolute line numbers
au InsertEnter * :set nu
" Other modes: relative line numbers
au InsertLeave * :set rnu

set ruler " Where the cursor is, in the linebuffer
set scrolloff=3  " Always show 3 lines around cursor

set hls " Highlight searches
set incsearch " Highlight search as you type
set ignorecase " Searches ignore case
set smartcase " Searching for 'a/Bc'  matches 'aBc' not 'abc'

set backspace=indent,eol,start

" KEYMAPPINGS
"
" Define "," as the "Leader" character (:help leader)
let mapleader = ","
let g:mapleader = ","

" Fast saving with Leader "w"
map <leader>w :w!<CR>

" use Leader "space" to clear out the search results highlighting
nnoremap <leader><space> :noh<CR>

"The Esc key just gets smaller and smaller...
noremap <F1> <Esc>
" And maybe I don't want to hit it at all.
imap jk <Esc>
imap kj <Esc>

nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
" END KEYMAPPINGS

" Ruby
let g:rubycomplete_rails = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_buffer_loading = 1
" End ruby

" vim-statline (:help statline)
let g:statline_fugitive = 1

let g:Powerline_symbols = 'fancy'

" tagbar
let g:tagbar_left = 1
let g:tagbar_width = 30
let g:tagbar_show_visibility = 1
let g:tagbar_iconchars = ['▾', '▸'] 
"toggle ctags window with "F4"
map <F4> :TagbarToggle<CR> 
"build ctags with "F8"
map <F8> :!/usr/local/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" "zz" now puts the line 10% above the middle of the screen instead of dead
" center
if has('float')
  nnoremap <silent> zz :exec "normal! zz" . float2nr(winheight(0)*0.1) . "\<Lt>C-E>"<CR>
endif

let g:pad_dir = "~/Google\ Drive/vimpad"

" Toggle column to check 80-char limit
nnoremap <F2> :call ToggleColorColumn()<CR>

func! ToggleColorColumn()
    if exists("b:colorcolumnon") && b:colorcolumnon
        let b:colorcolumnon = 0
        exec ':set colorcolumn=0'
        echo '80 column marker off'
    else
        let b:colorcolumnon = 1
        exec ':set colorcolumn=80'
        echo '80 column marker on'
    endif    
endfunc
